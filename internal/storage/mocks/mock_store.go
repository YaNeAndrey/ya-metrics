// Code generated by MockGen. DO NOT EDIT.
// Source: internal\storage\metricrep.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/YaNeAndrey/ya-metrics/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageRepo is a mock of StorageRepo interface.
type MockStorageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepoMockRecorder
}

// MockStorageRepoMockRecorder is the mock recorder for MockStorageRepo.
type MockStorageRepoMockRecorder struct {
	mock *MockStorageRepo
}

// NewMockStorageRepo creates a new mock instance.
func NewMockStorageRepo(ctrl *gomock.Controller) *MockStorageRepo {
	mock := &MockStorageRepo{ctrl: ctrl}
	mock.recorder = &MockStorageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepo) EXPECT() *MockStorageRepoMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockStorageRepo) GetAllMetrics(c context.Context) ([]storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", c)
	ret0, _ := ret[0].([]storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockStorageRepoMockRecorder) GetAllMetrics(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockStorageRepo)(nil).GetAllMetrics), c)
}

// GetMetricByNameAndType mocks base method.
func (m *MockStorageRepo) GetMetricByNameAndType(c context.Context, metricName, metricType string) (storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricByNameAndType", c, metricName, metricType)
	ret0, _ := ret[0].(storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricByNameAndType indicates an expected call of GetMetricByNameAndType.
func (mr *MockStorageRepoMockRecorder) GetMetricByNameAndType(c, metricName, metricType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricByNameAndType", reflect.TypeOf((*MockStorageRepo)(nil).GetMetricByNameAndType), c, metricName, metricType)
}

// UpdateMultipleMetrics mocks base method.
func (m *MockStorageRepo) UpdateMultipleMetrics(c context.Context, newMetrics []storage.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMultipleMetrics", c, newMetrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultipleMetrics indicates an expected call of UpdateMultipleMetrics.
func (mr *MockStorageRepoMockRecorder) UpdateMultipleMetrics(c, newMetrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultipleMetrics", reflect.TypeOf((*MockStorageRepo)(nil).UpdateMultipleMetrics), c, newMetrics)
}

// UpdateOneMetric mocks base method.
func (m *MockStorageRepo) UpdateOneMetric(c context.Context, newMetric storage.Metrics, setCounterDelta bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneMetric", c, newMetric, setCounterDelta)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneMetric indicates an expected call of UpdateOneMetric.
func (mr *MockStorageRepoMockRecorder) UpdateOneMetric(c, newMetric, setCounterDelta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneMetric", reflect.TypeOf((*MockStorageRepo)(nil).UpdateOneMetric), c, newMetric, setCounterDelta)
}
